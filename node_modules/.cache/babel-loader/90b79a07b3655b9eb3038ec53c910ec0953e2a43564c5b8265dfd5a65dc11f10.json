{"ast":null,"code":"var _jsxFileName = \"/Users/laurendemaio/Documents/GitHub/ToDoapp/src/components/TodoParent.js\";\nimport React from \"react\";\nimport TodoItem from \"./TodoItem\"; // path\nimport AddTodo from \"./TodoForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TodoParent(props) {\n  this.state = {\n    todo: [{\n      id: 1,\n      title: \"Go out\",\n      completed: false\n    }, {\n      id: 2,\n      title: \"Go home\",\n      completed: false\n    }, {\n      id: 3,\n      title: \"Go to bed\",\n      completed: false\n    }, {\n      id: 4,\n      title: \"Do hw\",\n      completed: false\n    }]\n  };\n\n  //generates random id;\n  guid = () => {\n    let s4 = () => {\n      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n    };\n    //return id of format 'aaaaaaaa'-'aaaa'-'aaaa'-'aaaa'-'aaaaaaaaaaaa'\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n  };\n  deleteItem = id => {\n    console.log(\"Delete from TodoParent \" + id);\n    // Delete the element with id\n    this.setState({\n      // Use filter to remove the element with id\n      todo: this.state.todo.filter(item => item.id !== id)\n    });\n  };\n  markComplete = id => {\n    console.log(\"MarkComplete from TodoParent \" + id);\n    this.setState({\n      todo: this.state.todo.map((item, index) => {\n        if (item.id === id) {\n          // Only make a copy for the one object that has changed\n          item = {\n            ...item,\n            completed: !item.completed\n          };\n        }\n        // We'll reuse objects that haven't changed and return the toggled object∂\n        return item;\n      })\n    });\n  };\n  addTodo = newTitle => {\n    console.log(\"addTodo from TodoParent: \" + newTitle);\n    // Create the element to add with a unique id\n    const nextIdNumber = this.state.todo.length + this.guid();\n    const newTodoItem = {\n      id: nextIdNumber,\n      title: newTitle,\n      completed: false\n    };\n    // Handling asynchronous changes of the state\n    //this.setState((state) => ({ todo: [...this.state.todo, newTodoItem] }));\n    this.setState({\n      todo: [...this.state.todo, newTodoItem]\n    });\n  };\n\n  // Produce a JSX element to show a single item\n  // Notice how makeOneTodoItem is used\n  makeOneTodoItem = todoItemInfo => /*#__PURE__*/_jsxDEV(TodoItem, {\n    // React wants a unique 'key' for each item\n    todo: todoItemInfo // A todo item - This is passed to the TodoItem component\n    ,\n    markComplete: this.markComplete // Function markComplete - This is passed to the TodoItem component\n    ,\n    deleteItem: this.deleteItem\n  }, todoItemInfo.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\n    // Run this function once for each item in the todo array\n    this.state.todo.map(this.makeOneTodoItem), /*#__PURE__*/_jsxDEV(AddTodo, {\n      addTodoItem: this.addTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n// return (\n//   <div>\n//     {\n//       // Run this function once for each item in the todo array\n//       this.state.todo.map(this.makeOneTodoItem)\n//     }\n//     {\n//       // Notice how AddTodo is used \n//     }\n//     <AddTodo addTodoItem={this.addTodo} />\n//   </div>\n// );\n_c = TodoParent;\nexport default TodoParent;\nvar _c;\n$RefreshReg$(_c, \"TodoParent\");","map":{"version":3,"names":["React","TodoItem","AddTodo","jsxDEV","_jsxDEV","TodoParent","props","state","todo","id","title","completed","guid","s4","Math","floor","random","toString","substring","deleteItem","console","log","setState","filter","item","markComplete","map","index","addTodo","newTitle","nextIdNumber","length","newTodoItem","makeOneTodoItem","todoItemInfo","fileName","_jsxFileName","lineNumber","columnNumber","children","addTodoItem","_c","$RefreshReg$"],"sources":["/Users/laurendemaio/Documents/GitHub/ToDoapp/src/components/TodoParent.js"],"sourcesContent":["import React from \"react\";\nimport TodoItem from \"./TodoItem\"; // path\nimport AddTodo from \"./TodoForm\";\n\nfunction TodoParent(props) {\n    this.state = {\n      todo: [\n        { id: 1, title: \"Go out\", completed: false },\n        { id: 2, title: \"Go home\", completed: false },\n        { id: 3, title: \"Go to bed\", completed: false },\n        { id: 4, title: \"Do hw\", completed: false },\n      ],\n    };\n\n\n  //generates random id;\n  guid = () => {\n    let s4 = () => {\n      return Math.floor((1 + Math.random()) * 0x10000)\n        .toString(16)\n        .substring(1);\n    }\n    //return id of format 'aaaaaaaa'-'aaaa'-'aaaa'-'aaaa'-'aaaaaaaaaaaa'\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n  }\n\n  deleteItem = (id) => {\n    console.log(\"Delete from TodoParent \" + id);\n    // Delete the element with id\n    this.setState({\n      // Use filter to remove the element with id\n      todo: this.state.todo.filter(item => item.id !== id)\n    })\n  }\n\n  markComplete = (id) => {\n    console.log(\"MarkComplete from TodoParent \" + id);\n    this.setState(\n      {\n        todo: this.state.todo.map((item, index) => {\n          if (item.id === id) {\n            // Only make a copy for the one object that has changed\n            item = { ...item, completed: !item.completed };\n          }\n          // We'll reuse objects that haven't changed and return the toggled object∂\n          return item;\n        }),\n      }\n    );\n  }\n\n  addTodo = (newTitle) => {\n    console.log(\"addTodo from TodoParent: \" + newTitle);\n    // Create the element to add with a unique id\n    const nextIdNumber = this.state.todo.length + this.guid();\n    const newTodoItem = { id: nextIdNumber, title: newTitle, completed: false };\n    // Handling asynchronous changes of the state\n    //this.setState((state) => ({ todo: [...this.state.todo, newTodoItem] }));\n    this.setState({ todo: [...this.state.todo, newTodoItem] });\n  };\n\n  // Produce a JSX element to show a single item\n  // Notice how makeOneTodoItem is used\n  makeOneTodoItem = (todoItemInfo) => (\n    <TodoItem\n      key={todoItemInfo.id} // React wants a unique 'key' for each item\n      todo={todoItemInfo} // A todo item - This is passed to the TodoItem component\n      markComplete={this.markComplete} // Function markComplete - This is passed to the TodoItem component\n      deleteItem={this.deleteItem}\n    />\n  );\n\n  return (\n    <div>\n      {\n        // Run this function once for each item in the todo array\n        this.state.todo.map(this.makeOneTodoItem)\n      }\n      {\n        // Notice how AddTodo is used \n      }\n      <AddTodo addTodoItem={this.addTodo} />\n    </div>\n  );\n}\n\n\n    // return (\n    //   <div>\n    //     {\n    //       // Run this function once for each item in the todo array\n    //       this.state.todo.map(this.makeOneTodoItem)\n    //     }\n    //     {\n    //       // Notice how AddTodo is used \n    //     }\n    //     <AddTodo addTodoItem={this.addTodo} />\n    //   </div>\n    // );\n\n\n\nexport default TodoParent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}